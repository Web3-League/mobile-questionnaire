package fr.cosmetest.generateentities;
// Generated 15 déc. 2024, 15:56:41 by Hibernate Tools 6.5.1.Final


import java.math.BigInteger;
import java.sql.Timestamp;

/**
 * X.statementsWithSortingId generated by hbm2java
 */
public class X.statementsWithSortingId  implements java.io.Serializable {


     private BigInteger avgRowsSorted;
     private BigInteger avgSortMerges;
     private String db;
     private String digest;
     private long execCount;
     private Timestamp firstSeen;
     private Timestamp lastSeen;
     private String query;
     private long rowsSorted;
     private long sortMergePasses;
     private long sortUsingRange;
     private long sortsUsingScans;
     private long totalLatency;

    public X.statementsWithSortingId() {
    }

	
    public X.statementsWithSortingId(BigInteger avgRowsSorted, BigInteger avgSortMerges, long execCount, Timestamp firstSeen, Timestamp lastSeen, long rowsSorted, long sortMergePasses, long sortUsingRange, long sortsUsingScans, long totalLatency) {
        this.avgRowsSorted = avgRowsSorted;
        this.avgSortMerges = avgSortMerges;
        this.execCount = execCount;
        this.firstSeen = firstSeen;
        this.lastSeen = lastSeen;
        this.rowsSorted = rowsSorted;
        this.sortMergePasses = sortMergePasses;
        this.sortUsingRange = sortUsingRange;
        this.sortsUsingScans = sortsUsingScans;
        this.totalLatency = totalLatency;
    }
    public X.statementsWithSortingId(BigInteger avgRowsSorted, BigInteger avgSortMerges, String db, String digest, long execCount, Timestamp firstSeen, Timestamp lastSeen, String query, long rowsSorted, long sortMergePasses, long sortUsingRange, long sortsUsingScans, long totalLatency) {
       this.avgRowsSorted = avgRowsSorted;
       this.avgSortMerges = avgSortMerges;
       this.db = db;
       this.digest = digest;
       this.execCount = execCount;
       this.firstSeen = firstSeen;
       this.lastSeen = lastSeen;
       this.query = query;
       this.rowsSorted = rowsSorted;
       this.sortMergePasses = sortMergePasses;
       this.sortUsingRange = sortUsingRange;
       this.sortsUsingScans = sortsUsingScans;
       this.totalLatency = totalLatency;
    }
   
    public BigInteger getAvgRowsSorted() {
        return this.avgRowsSorted;
    }
    
    public void setAvgRowsSorted(BigInteger avgRowsSorted) {
        this.avgRowsSorted = avgRowsSorted;
    }
    public BigInteger getAvgSortMerges() {
        return this.avgSortMerges;
    }
    
    public void setAvgSortMerges(BigInteger avgSortMerges) {
        this.avgSortMerges = avgSortMerges;
    }
    public String getDb() {
        return this.db;
    }
    
    public void setDb(String db) {
        this.db = db;
    }
    public String getDigest() {
        return this.digest;
    }
    
    public void setDigest(String digest) {
        this.digest = digest;
    }
    public long getExecCount() {
        return this.execCount;
    }
    
    public void setExecCount(long execCount) {
        this.execCount = execCount;
    }
    public Timestamp getFirstSeen() {
        return this.firstSeen;
    }
    
    public void setFirstSeen(Timestamp firstSeen) {
        this.firstSeen = firstSeen;
    }
    public Timestamp getLastSeen() {
        return this.lastSeen;
    }
    
    public void setLastSeen(Timestamp lastSeen) {
        this.lastSeen = lastSeen;
    }
    public String getQuery() {
        return this.query;
    }
    
    public void setQuery(String query) {
        this.query = query;
    }
    public long getRowsSorted() {
        return this.rowsSorted;
    }
    
    public void setRowsSorted(long rowsSorted) {
        this.rowsSorted = rowsSorted;
    }
    public long getSortMergePasses() {
        return this.sortMergePasses;
    }
    
    public void setSortMergePasses(long sortMergePasses) {
        this.sortMergePasses = sortMergePasses;
    }
    public long getSortUsingRange() {
        return this.sortUsingRange;
    }
    
    public void setSortUsingRange(long sortUsingRange) {
        this.sortUsingRange = sortUsingRange;
    }
    public long getSortsUsingScans() {
        return this.sortsUsingScans;
    }
    
    public void setSortsUsingScans(long sortsUsingScans) {
        this.sortsUsingScans = sortsUsingScans;
    }
    public long getTotalLatency() {
        return this.totalLatency;
    }
    
    public void setTotalLatency(long totalLatency) {
        this.totalLatency = totalLatency;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof X.statementsWithSortingId) ) return false;
		 X.statementsWithSortingId castOther = ( X.statementsWithSortingId ) other; 
         
		 return ( (this.getAvgRowsSorted()==castOther.getAvgRowsSorted()) || ( this.getAvgRowsSorted()!=null && castOther.getAvgRowsSorted()!=null && this.getAvgRowsSorted().equals(castOther.getAvgRowsSorted()) ) )
 && ( (this.getAvgSortMerges()==castOther.getAvgSortMerges()) || ( this.getAvgSortMerges()!=null && castOther.getAvgSortMerges()!=null && this.getAvgSortMerges().equals(castOther.getAvgSortMerges()) ) )
 && ( (this.getDb()==castOther.getDb()) || ( this.getDb()!=null && castOther.getDb()!=null && this.getDb().equals(castOther.getDb()) ) )
 && ( (this.getDigest()==castOther.getDigest()) || ( this.getDigest()!=null && castOther.getDigest()!=null && this.getDigest().equals(castOther.getDigest()) ) )
 && (this.getExecCount()==castOther.getExecCount())
 && ( (this.getFirstSeen()==castOther.getFirstSeen()) || ( this.getFirstSeen()!=null && castOther.getFirstSeen()!=null && this.getFirstSeen().equals(castOther.getFirstSeen()) ) )
 && ( (this.getLastSeen()==castOther.getLastSeen()) || ( this.getLastSeen()!=null && castOther.getLastSeen()!=null && this.getLastSeen().equals(castOther.getLastSeen()) ) )
 && ( (this.getQuery()==castOther.getQuery()) || ( this.getQuery()!=null && castOther.getQuery()!=null && this.getQuery().equals(castOther.getQuery()) ) )
 && (this.getRowsSorted()==castOther.getRowsSorted())
 && (this.getSortMergePasses()==castOther.getSortMergePasses())
 && (this.getSortUsingRange()==castOther.getSortUsingRange())
 && (this.getSortsUsingScans()==castOther.getSortsUsingScans())
 && (this.getTotalLatency()==castOther.getTotalLatency());
   }
   
   public int hashCode() {
         int result = 17;
         
        result = 37 * result + ( getAvgRowsSorted() == null ? 0 : this.getAvgRowsSorted().hashCode() );
        result = 37 * result + ( getAvgSortMerges() == null ? 0 : this.getAvgSortMerges().hashCode() );
        result = 37 * result + ( getDb() == null ? 0 : this.getDb().hashCode() );
        result = 37 * result + ( getDigest() == null ? 0 : this.getDigest().hashCode() );
        result = 37 * result + (int) this.getExecCount();
        result = 37 * result + ( getFirstSeen() == null ? 0 : this.getFirstSeen().hashCode() );
        result = 37 * result + ( getLastSeen() == null ? 0 : this.getLastSeen().hashCode() );
        result = 37 * result + ( getQuery() == null ? 0 : this.getQuery().hashCode() );
        result = 37 * result + (int) this.getRowsSorted();
        result = 37 * result + (int) this.getSortMergePasses();
        result = 37 * result + (int) this.getSortUsingRange();
        result = 37 * result + (int) this.getSortsUsingScans();
        result = 37 * result + (int) this.getTotalLatency();
         return result;
   }   


}


